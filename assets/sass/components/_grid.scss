/*-----------------------------------*\
  TreeBark
  
  something.

  ====================================
  Based on
  $TOAST-GRID

  "An insane grid.
  You'd be mad to use it.""

\*-----------------------------------*/


$grid-namespace: "grid";
$grid-column-namespace: "col";

// choose your column size.
$col-size: 12;
// given your column size, add the numbers (text/numeric whatever u want)
// to this list
$numbers: (1,2,3,4,5,6,7,8,9,10,11,12);

// Gutter width
$gutter-width: 20px;

// Breakpoints
$breakpoint-medium: 700px;
$breakpoint-small: 480px;

// #{} is used for interpolation, which enables you to use 
// sassScript variables in selectors and property names
.#{$grid-namespace} {
  list-style: none;
  margin-left: -$gutter-width;
  
  // Placeholder Selectors
  // These will be used when building the column classes
  //
  // % is used for placeholder selectors. placeholder selectors 
  // are @extend-only. Abstractness!
  > %span-all            { width: percentage(1/1); }
  > %one-half            { width: percentage(1/2); }
  > %one-third           { width: percentage(1/3); }
  > %two-thirds          { width: percentage(2/3); }
  > %one-quarter         { width: percentage(1/4); }
  > %two-quarters        { width: percentage(2/4); }
  > %three-quarters      { width: percentage(3/4); }

  > %push-span-all       { margin-left: percentage(1/1); }
  > %push-one-half       { margin-left: percentage(1/2); }
  > %push-one-third      { margin-left: percentage(1/3); }
  > %push-two-thirds     { margin-left: percentage(2/3); }
  > %push-one-quarter    { margin-left: percentage(1/4); }
  > %push-two-quarters   { margin-left: percentage(2/4); }
  > %push-three-quarters { margin-left: percentage(3/4); }

  > %pull-span-all       { margin-left: -(percentage(1/1)); }
  > %pull-one-half       { margin-left: -(percentage(1/2)); }
  > %pull-one-third      { margin-left: -(percentage(1/3)); }
  > %pull-two-thirds     { margin-left: -(percentage(2/3)); }
  > %pull-one-quarter    { margin-left: -(percentage(1/4)); }
  > %pull-two-quarters   { margin-left: -(percentage(2/4)); }
  > %pull-three-quarters { margin-left: -(percentage(3/4)); }

  // Constructing the default column classes
  // For each column ...
  @each $i in $numbers {
    //dynamically constructing the column class names
    > .#{$grid-column-namespace}-#{$i} {
      //constructing the classes conditionally based on what
      //the width of each column should be
      @if percentage($i/$col-size) == percentage(1/1) {
        @extend %span-all;
      } @else if percentage($i/$col-size) == percentage(1/2) {
        @extend %one-half;
      } @else if percentage($i/$col-size) == percentage(1/3) {
        @extend %one-third;
      } @else if percentage($i/$col-size) == percentage(2/3) {
        @extend %two-thirds;
      } @else if percentage($i/$col-size) == percentage(1/4) {
        @extend %one-quarter;
      } @else if percentage($i/$col-size) == percentage(2/4) {
        @extend %two-quarters;
      } @else if percentage($i/$col-size) == percentage(3/4) {
        @extend %three-quarters;
      } @else {

        width: percentage($i/$col-size);

      }
    }
    
    // classes that push the element by n columns
    > .#{$grid-column-namespace}-#{$i}-push {

      @if percentage($i/$col-size) == percentage(1/1) {
        @extend %push-span-all;
      } @else if percentage($i/$col-size) == percentage(1/2) {
        @extend %push-one-half;
      } @else if percentage($i/$col-size) == percentage(1/3) {
        @extend %push-one-third;
      } @else if percentage($i/$col-size) == percentage(2/3) {
        @extend %push-two-thirds;
      } @else if percentage($i/$col-size) == percentage(1/4) {
        @extend %push-one-quarter;
      } @else if percentage($i/$col-size) == percentage(2/4) {
        @extend %push-two-quarters;
      } @else if percentage($i/$col-size) == percentage(3/4) {
        @extend %push-three-quarters;
      } @else {

        margin-left: percentage($i/$col-size);

      }
    }
    
    // pulls the element by n columns
    > .#{$grid-column-namespace}-#{$i}-pull {

      @if percentage($i/$col-size) == percentage(1/1) {
        @extend %pull-span-all;
      } @else if percentage($i/$col-size) == percentage(1/2) {
        @extend %pull-one-half;
      } @else if percentage($i/$col-size) == percentage(1/3) {
        @extend %pull-one-third;
      } @else if percentage($i/$col-size) == percentage(2/3) {
        @extend %pull-two-thirds;
      } @else if percentage($i/$col-size) == percentage(1/4) {
        @extend %pull-one-quarter;
      } @else if percentage($i/$col-size) == percentage(2/4) {
        @extend %pull-two-quarters;
      } @else if percentage($i/$col-size) == percentage(3/4) {
        @extend %pull-three-quarters;
      } @else {

        margin-left: -(percentage($i/$col-size));

      }
    }
  } // end @each

  // All direct descendents of .grid get treated the same way.
  // This might be overkill for some, but itâ€™s a time-saver for me.
  .#{$grid-column-namespace} {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
    display: inline-block;
    margin-right: -.25em;
    min-height: 1px;
    padding-left: $gutter-width;
    vertical-align: top;

    @media (max-width: $breakpoint-medium) {
      display: block;
      margin-left: 0;
      margin-right: 0;
      width: auto;
    }
    
    //conditional responsive columns
    @media (max-width: $breakpoint-medium) and (min-width: $breakpoint-small) {
      &[class*="m"] {
        display: inline-block;
        margin-right: -.24em;
      }

      &.m6 {
        width: percentage(1/2);
      }

      &.m4 {
        width: percentage(1/3);
      }

      &.m8 {
        width: percentage(2/3);
      }

      &.m3 {
        width: percentage(1/4);
      }

      &.m9 {
        width: percentage(3/4);
      }
    }

    @media (max-width: $breakpoint-small) {
      &[class*="s"] {
        display: inline-block;
        margin-right: -.24em;
      }

      &.s6 {
        width: percentage(1/2);
      }

      &.s4 {
        width: percentage(1/3);
      }

      &.s8 {
        width: percentage(2/3);
      }

      &.s3 {
        width: percentage(1/4);
      }

      &.s9 {
        width: percentage(3/4);
      }
    }
  }

  // Centers the column in the grid and clears the row of all other columns
  .#{$grid-column-namespace}-centered {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }


  // Displays the column as the first in its row
  .#{$grid-column-namespace}-first {
    float: left;
  }

  // Displays the column as the last in its row
  .#{$grid-column-namespace}-last {
    float: right;
  }

  // Removes gutters from the columns
  &.grid-no-gutter {
    margin-left: 0;
    width: 100%;

    > * {
      padding-left: 0;
    }

    .#{$grid-column-namespace}-span-all {
      margin-left: 0;
      width: 100%;
    }
  }

  // Align column to the bottom.
  .#{$grid-column-namespace}-ab {
    vertical-align: bottom;
  }

  // Align column to the middle.
  .#{$grid-column-namespace}-am {
    vertical-align: middle;
  }

}
